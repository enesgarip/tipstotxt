Tip 1:Care About Your Craft

Tip 2:Think! About Your Work

Tip 3:Provide Options, Don't Make Lame Excuses

Tip 4:Don't Live with Broken Windows

Tip 5:Be a Catalyst for Change

Tip 6:Remember the Big Picture

Tip 7:Make Quality a Requirements Issue

Tip 8:Invest Regularly in Your Knowledge Portfolio

Tip 9:Critically Analyze What You Read and Hear

Tip 10:It's Both What You Say and the Way You Say It

Tip 11:DRY—Don't Repeat Yourself

Tip 12:Make It Easy to Reuse

Tip 13:Eliminate Effects Between Unrelated Things

Tip 14:There Are No Final Decisions

Tip 15:Use Tracer Bullets to Find the Target

Tip 16:Prototype to Learn

Tip 17:Program Close to the Problem domain

Tip 18:Estimate to Avoid Surprises

Tip 19:Iterate the Schedule with the Code

Tip 20:Keep Knowledge in Plain Text

Tip 21:Use the Power of Command Shells

Tip 22:Use a Single Editor Well

Tip 23:Always Use Source Code Control

Tip 24:Fix the Problem, Not the Blame

Tip 25:Don't Panic

Tip 26:"select" Isn't Broken

Tip 27:Don't Assume It—Prove It

Tip 28:Learn a Text Manipulation Language

Tip 29:Write Code That Writes Code

Tip 30:You Can't Write Perfect Software

Tip 31:Design with Contracts

Tip 32:Crash Early

Tip 33:If It Can't Happen, Use Assertions to Ensure That It Won't

Tip 34:Use Exceptions for Exceptional Problems

Tip 35:Finish What You Start

Tip 36:Minimize Coupling Between Modules

Tip 37:Configure, Don't Integrate

Tip 38:Put Abstractions in Code Details in Metadata

Tip 39:Analyze Workflow to Improve Concurrency

Tip 40:Design Using Services

Tip 41:Always Design for Concurrency

Tip 42:Separate Views from Models

Tip 43:Use Blackboards to Coordinate Workflow

Tip 44:Don't Program by Coincidence

Tip 45:Estimate the Order of Your Algorithms

Tip 46:Test Your Estimates

Tip 47:Refactor Early, Refactor Often

Tip 48:Design to Test

Tip 49:Test Your Software, or Your Users Will

Tip 50:Don't Use Wizard Code You Don't Understand

Tip 51:Don't Gather Requirements—Dig for Them

Tip 52:Work with a User to Think Like a User

Tip 53:Abstractions Live Longer than Details

Tip 54:Use a Project Glossary

Tip 55:Don't Think Outside the Box—Find the Box

Tip 56:Listen to Nagging Doubts—Start When You're Ready

Tip 57:Some Things Are Better Done than Described

Tip 58:Don't Be a Slave to Formal Methods

Tip 59:Expensive Too Do Not Produce Better Designs

Tip 60:Organize Around Functionality, Not Job Functions

Tip 61:Don't Use Manual Procedures

Tip 62:Test Early. Test Often. Test Automatically.

Tip 63:Coding Ain't Done 'Til All the Tests Run

Tip 64:Use Saboteurs to Test Your Testing

Tip 65:Test State Coverage, Not Code Coverage

Tip 66:Find Bugs Once

Tip 67:Treat English as Just Another Programming Language

Tip 68:Build Documentation In, Don't Bolt It On

Tip 69:Gently Exceed Your Users' Expectations

Tip 70:Sign Your Work

